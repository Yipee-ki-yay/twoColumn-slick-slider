"use strict";jQuery(document).ready(function(){window.innerWidth<768&&jQuery(".main-slider-mobile").length&&jQuery(".main-slider-mobile").slick({arrows:!1,dots:!0,vertical:!0}),768<=window.innerWidth&&function(){if(jQuery(".main-slider-desctop").length){var e=jQuery(".main-slider-desctop"),s=0;e.slick({arrows:!1,dots:!0,fade:!0,speed:600,autoplay:!0,autoplaySpeed:4e3}),e.on("beforeChange",function(e,i,n){jQuery(i.$slides[n]).removeClass("animated")}),e.on("afterChange",function(e,i,n){jQuery(i.$slides[n]).addClass("animated"),++s==i.$slides.length&&jQuery(this).slick("slickSetOption","autoplay",!1)})}}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
