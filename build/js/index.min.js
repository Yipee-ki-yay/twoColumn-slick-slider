"use strict";var PopupModule,RecentFunctions,ValidationModule,AccordionModule,AnimateBorder,popupOrder,modals,pageOverlay,status="JS - OK!";function cl(e,o,t,n){return console.log(e,o||"",t||"",n||""),"-"}cl(status);var test="include js error";$(document).ready(function(){console.log("document ready"),popupOrder=document.getElementById("popupOrder"),modals=document.getElementsByClassName("popup"),pageOverlay=document.getElementById("pageOverlay"),test="include js - OK",$("body")&&console.log("jQuery OK"),console.log(test),$("body").on("click",".orderButton",function(){popupOrder&&PopupModule.openPopup(popupOrder)}),$("accordionBlockSelector").on("click",".buttonSelector",function(e){if(document.documentElement.clientWidth<992){e.stopPropagation();var o=this.nextElementSibling;toggleButtonContent(this),AccordionModule.toggleContent("withoutSiblings",this,o)}}),window.innerWidth<768&&$(".main-slider-mobile").length&&$(".main-slider-mobile").slick({arrows:!1,dots:!0,vertical:!0}),768<=window.innerWidth&&function(){if($(".main-slider-desctop").length){var e=$(".main-slider-desctop"),n=0;e.slick({arrows:!1,dots:!0,fade:!0,speed:900,autoplay:!0,autoplaySpeed:4e3}),setTimeout(function(){e.find(".slider-desctop-item:first-child").addClass("animated")},10),e.on("beforeChange",function(e,o,t){$(o.$slides[t]).removeClass("animated")}),e.on("afterChange",function(e,o,t){$(o.$slides[t]).addClass("animated"),++n==o.$slides.length&&$(this).slick("slickSetOption","autoplay",!1)})}}()}),window.onload=function(){console.log("window load")};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
