"use strict";jQuery(document).ready(function(){window.innerWidth<768&&jQuery(".main-slider-mobile").length&&jQuery(".main-slider-mobile").slick({arrows:!1,dots:!0}),768<=window.innerWidth&&function(){if(jQuery(".main-slider-desctop").length){var e=jQuery(".main-slider-desctop"),n=0;e.slick({arrows:!1,dots:!0,fade:!0,speed:600,autoplay:!0,autoplaySpeed:4e3});for(var i=jQuery(".slick-dots li button"),s=0;s<i.length;s++)$(i[s]).text(s);jQuery(".slick-dots li:first-child").css("display","none"),e.on("beforeChange",function(e,i,s){jQuery(i.$slides[s]).removeClass("animated")}),e.on("afterChange",function(e,i,s){jQuery(i.$slides[s]).addClass("animated"),++n==i.$slides.length&&jQuery(this).slick("slickSetOption","autoplay",!1)})}}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
